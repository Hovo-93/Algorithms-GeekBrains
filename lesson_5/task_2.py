"""
2.*	Написать программу сложения и умножения двух шестнадцатиричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].
Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)
__mul__
__add__
Пример:
Например, пользователь ввёл A2 и C4F.
Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’]
Произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].
1. вариант
defaultdict(list)
int(, 16)
reduce
2. вариант
class HexNumber:
    __add__
    __mul__
hx = HexNumber
hx + hx
"""


# a = input('Введите первое шестнадцатеричное число')
# b = input('Введите второе шестнадцатеричное число')
# operator = ['+', '*']
def is_correct_operator(operator):
    return operator == '+' or operator == '*'


while True:
    a = input('Введите первое шестнадцатеричное число ')
    b = input('Введите второе шестнадцатеричное число ')
    operator = input('Введите  "+" или  "*" ')

    if operator == '+':
        print(hex(int(a, 16) + int(b, 16)))
    if operator == '*':
        print(hex(int(a, 16) * int(b, 16)))
    if not is_correct_operator(operator):
        print('Wrong operator')
        break
