"""
Задание 5.
Задание на закрепление навыков работы со стеком

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока

Реализуйте структуру "стопка тарелок".

Мы можем складывать тарелки в стопку и при превышении некоторого значения
нужно начать складывать тарелки в новую стопку.

Структура должна предусматривать наличие нескольких стеков.
Создание нового стека происходит при достижении предыдущим стеком порогового значения.
Реализуйте по аналогии с примером, рассмотренным на уроке, необходимые методы,
для реализации это структуры, добавьте новые методы (не рассмотренные в примере с урока)
для реализации этой задачи.

После реализации структуры, проверьте ее работу на различных сценариях

Подсказка:
Отдельне стопки можно реализовать через:
# 1) созд-е экземпляров стека (если стопка - класс)
# 2) lst = [[], [], [], [],....]
"""

"""Пример создания стека через ООП"""


class StackClass:
    def __init__(self):
        self.elems = []

    def is_empty(self):
        return self.elems == []

    def push_in(self, el):
        """Предполагаем, что верхний элемент стека находится в конце списка"""
        self.elems.append(el)

    def pop_out(self):
        return self.elems.pop()

    def get_val(self):
        return self.elems[len(self.elems) - 1]

    def stack_size(self):
        return len(self.elems)


# SC_OBJ = StackClass()
#
# # наполняем стек
# SC_OBJ.push_in(10)
# SC_OBJ.push_in('code')
# SC_OBJ.push_in(False)
# SC_OBJ.push_in(5.5)
# SC_OBJ.push_in(9.9)
# print(SC_OBJ.stack_size())
# print(SC_OBJ.is_empty())

b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def new(args):
    sc_obj = StackClass()
    new_stack = []
    for i in args:
        if sc_obj.stack_size() < 6:
            sc_obj.push_in(i)
        else:
            new_stack.append(i)
    return new_stack


print(new(b))
